/* tslint:disable */
/* eslint-disable */
/**
 * Isaac\'s Simple Media API
 * This is the swagger docs for the media API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddOrRemoveSingleCategoryDto
 */
export interface AddOrRemoveSingleCategoryDto {
    /**
     * The unique identifier for the category.
     * @type {string}
     * @memberof AddOrRemoveSingleCategoryDto
     */
    'categoryID': string;
}
/**
 * 
 * @export
 * @interface CategoryDto
 */
export interface CategoryDto {
    /**
     * Unique identifier for the category
     * @type {string}
     * @memberof CategoryDto
     */
    'id': string;
    /**
     * Name of the category
     * @type {string}
     * @memberof CategoryDto
     */
    'name': string;
    /**
     * Description of the category
     * @type {object}
     * @memberof CategoryDto
     */
    'description': object | null;
    /**
     * Thumbnail media item
     * @type {MediaItemDto}
     * @memberof CategoryDto
     */
    'thumbnail': MediaItemDto | null;
    /**
     * Creation date of the category
     * @type {string}
     * @memberof CategoryDto
     */
    'createdAt': string;
    /**
     * Last update date of the category
     * @type {string}
     * @memberof CategoryDto
     */
    'updatedAt': string;
    /**
     * List of media items associated with the category
     * @type {Array<MediaItemDto>}
     * @memberof CategoryDto
     */
    'mediaItems': Array<MediaItemDto> | null;
}
/**
 * 
 * @export
 * @interface CreateCategoryDto
 */
export interface CreateCategoryDto {
    /**
     * The name of the category.
     * @type {string}
     * @memberof CreateCategoryDto
     */
    'name': string;
    /**
     * The description of the category.
     * @type {string}
     * @memberof CreateCategoryDto
     */
    'description'?: string;
    /**
     * The media item ID to use for the category.
     * @type {string}
     * @memberof CreateCategoryDto
     */
    'thumbnailMediaID'?: string;
}
/**
 * 
 * @export
 * @interface MediaItemDto
 */
export interface MediaItemDto {
    /**
     * The unique identifier for the media item.
     * @type {string}
     * @memberof MediaItemDto
     */
    'id': string;
    /**
     * The original filename of the media item.
     * @type {string}
     * @memberof MediaItemDto
     */
    'fileName': string;
    /**
     * The file extension of the media item.
     * @type {string}
     * @memberof MediaItemDto
     */
    'extension': string;
    /**
     * The size of the file in bytes.
     * @type {number}
     * @memberof MediaItemDto
     */
    'size': number;
    /**
     * The SHA-256 content hash of the file.
     * @type {string}
     * @memberof MediaItemDto
     */
    'contentHash': string;
    /**
     * The MIME type of the file.
     * @type {string}
     * @memberof MediaItemDto
     */
    'mediaType': string;
    /**
     * Path to a generated thumbnail for video files.
     * @type {object}
     * @memberof MediaItemDto
     */
    'thumbnailPath': object | null;
    /**
     * 
     * @type {string}
     * @memberof MediaItemDto
     */
    'createdAt': string;
    /**
     * If set, the item is considered in the trash.
     * @type {object}
     * @memberof MediaItemDto
     */
    'recycledAt': object | null;
}
/**
 * 
 * @export
 * @interface PatchCategoryDto
 */
export interface PatchCategoryDto {
    /**
     * Unique identifier for the category
     * @type {string}
     * @memberof PatchCategoryDto
     */
    'id'?: string;
    /**
     * Name of the category
     * @type {string}
     * @memberof PatchCategoryDto
     */
    'name'?: string;
    /**
     * Description of the category
     * @type {object}
     * @memberof PatchCategoryDto
     */
    'description'?: object | null;
    /**
     * Thumbnail media item
     * @type {MediaItemDto}
     * @memberof PatchCategoryDto
     */
    'thumbnail'?: MediaItemDto | null;
    /**
     * Creation date of the category
     * @type {string}
     * @memberof PatchCategoryDto
     */
    'createdAt'?: string;
    /**
     * Last update date of the category
     * @type {string}
     * @memberof PatchCategoryDto
     */
    'updatedAt'?: string;
    /**
     * List of media items associated with the category
     * @type {Array<MediaItemDto>}
     * @memberof PatchCategoryDto
     */
    'mediaItems'?: Array<MediaItemDto> | null;
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async health(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.health(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.health']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.health(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public health(options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).health(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new category
         * @param {CreateCategoryDto} createCategoryDto The media file to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createCategoryDto: CreateCategoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCategoryDto' is not null or undefined
            assertParamExists('create', 'createCategoryDto', createCategoryDto)
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a category by ID
         * @param {string} id The ID of the category to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findOne', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a category by ID
         * @param {string} id The ID of the category to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('remove', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a category by ID
         * @param {string} id The ID of the category to update
         * @param {PatchCategoryDto} patchCategoryDto Partial category body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, patchCategoryDto: PatchCategoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'patchCategoryDto' is not null or undefined
            assertParamExists('update', 'patchCategoryDto', patchCategoryDto)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new category
         * @param {CreateCategoryDto} createCategoryDto The media file to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createCategoryDto: CreateCategoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createCategoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.findAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a category by ID
         * @param {string} id The ID of the category to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.findOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a category by ID
         * @param {string} id The ID of the category to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.remove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a category by ID
         * @param {string} id The ID of the category to update
         * @param {PatchCategoryDto} patchCategoryDto Partial category body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, patchCategoryDto: PatchCategoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, patchCategoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.update']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new category
         * @param {CreateCategoryDto} createCategoryDto The media file to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createCategoryDto: CreateCategoryDto, options?: RawAxiosRequestConfig): AxiosPromise<CategoryDto> {
            return localVarFp.create(createCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<CategoryDto>> {
            return localVarFp.findAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a category by ID
         * @param {string} id The ID of the category to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CategoryDto> {
            return localVarFp.findOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a category by ID
         * @param {string} id The ID of the category to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.remove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a category by ID
         * @param {string} id The ID of the category to update
         * @param {PatchCategoryDto} patchCategoryDto Partial category body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: string, patchCategoryDto: PatchCategoryDto, options?: RawAxiosRequestConfig): AxiosPromise<CategoryDto> {
            return localVarFp.update(id, patchCategoryDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new category
     * @param {CreateCategoryDto} createCategoryDto The media file to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public create(createCategoryDto: CreateCategoryDto, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).create(createCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve all categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public findAll(options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).findAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a category by ID
     * @param {string} id The ID of the category to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public findOne(id: string, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).findOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a category by ID
     * @param {string} id The ID of the category to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public remove(id: string, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).remove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a category by ID
     * @param {string} id The ID of the category to update
     * @param {PatchCategoryDto} patchCategoryDto Partial category body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public update(id: string, patchCategoryDto: PatchCategoryDto, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).update(id, patchCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This is an asynchronous task that runs in the background.
         * @summary Manually trigger a scan to find and remove orphaned media records.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerOrphanCleanup: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobs/cleanup-orphans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an asynchronous task that runs in the background.
         * @summary Manually trigger a scan to find and remove orphaned files without media records.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerOrphanFileCleanup: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobs/cleanup-orphan-files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * This is an asynchronous task that runs in the background.
         * @summary Manually trigger a scan to find and remove orphaned media records.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerOrphanCleanup(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerOrphanCleanup(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.triggerOrphanCleanup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This is an asynchronous task that runs in the background.
         * @summary Manually trigger a scan to find and remove orphaned files without media records.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerOrphanFileCleanup(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerOrphanFileCleanup(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.triggerOrphanFileCleanup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * This is an asynchronous task that runs in the background.
         * @summary Manually trigger a scan to find and remove orphaned media records.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerOrphanCleanup(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.triggerOrphanCleanup(options).then((request) => request(axios, basePath));
        },
        /**
         * This is an asynchronous task that runs in the background.
         * @summary Manually trigger a scan to find and remove orphaned files without media records.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerOrphanFileCleanup(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.triggerOrphanFileCleanup(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
    /**
     * This is an asynchronous task that runs in the background.
     * @summary Manually trigger a scan to find and remove orphaned media records.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public triggerOrphanCleanup(options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).triggerOrphanCleanup(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is an asynchronous task that runs in the background.
     * @summary Manually trigger a scan to find and remove orphaned files without media records.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public triggerOrphanFileCleanup(options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).triggerOrphanFileCleanup(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MediaItemApi - axios parameter creator
 * @export
 */
export const MediaItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a media item to a category.
         * @param {string} id The UUID of the media item.
         * @param {AddOrRemoveSingleCategoryDto} addOrRemoveSingleCategoryDto The body containing the category ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMediaItemToCategory: async (id: string, addOrRemoveSingleCategoryDto: AddOrRemoveSingleCategoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addMediaItemToCategory', 'id', id)
            // verify required parameter 'addOrRemoveSingleCategoryDto' is not null or undefined
            assertParamExists('addMediaItemToCategory', 'addOrRemoveSingleCategoryDto', addOrRemoveSingleCategoryDto)
            const localVarPath = `/media-item/{id}/category`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addOrRemoveSingleCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fully delete a media item.
         * @param {string} id The UUID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItem', 'id', id)
            const localVarPath = `/media-item/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a media item by ID
         * @param {string} id The ID of the media item to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaItem: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMediaItem', 'id', id)
            const localVarPath = `/media-item/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Move a media item to the recycle bin (soft delete)
         * @param {string} id The UUID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recycleMediaItem: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recycleMediaItem', 'id', id)
            const localVarPath = `/media-item/{id}/recycle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all media items that are in the trash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recycledMediaItems: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/media-item/recycled`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a media item from a category.
         * @param {string} id The UUID of the media item.
         * @param {AddOrRemoveSingleCategoryDto} addOrRemoveSingleCategoryDto The body containing the category ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMediaItemFromCategory: async (id: string, addOrRemoveSingleCategoryDto: AddOrRemoveSingleCategoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeMediaItemFromCategory', 'id', id)
            // verify required parameter 'addOrRemoveSingleCategoryDto' is not null or undefined
            assertParamExists('removeMediaItemFromCategory', 'addOrRemoveSingleCategoryDto', addOrRemoveSingleCategoryDto)
            const localVarPath = `/media-item/{id}/category`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addOrRemoveSingleCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore a media item from the recycle bin
         * @param {string} id The UUID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unRecycleMediaItem: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unRecycleMediaItem', 'id', id)
            const localVarPath = `/media-item/{id}/un-recycle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all media items that are not in any categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uncategorisedMediaItems: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/media-item/uncategorised`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a single media file
         * @param {File} file 
         * @param {string | null} [categoryID] Optional UUID of the category to add this media to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (file: File, categoryID?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadFile', 'file', file)
            const localVarPath = `/media-item/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (categoryID !== undefined) { 
                localVarFormParams.append('categoryID', categoryID as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaItemApi - functional programming interface
 * @export
 */
export const MediaItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a media item to a category.
         * @param {string} id The UUID of the media item.
         * @param {AddOrRemoveSingleCategoryDto} addOrRemoveSingleCategoryDto The body containing the category ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMediaItemToCategory(id: string, addOrRemoveSingleCategoryDto: AddOrRemoveSingleCategoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMediaItemToCategory(id, addOrRemoveSingleCategoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaItemApi.addMediaItemToCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fully delete a media item.
         * @param {string} id The UUID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItem(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItem(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaItemApi.deleteItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a media item by ID
         * @param {string} id The ID of the media item to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaItem(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaItem(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaItemApi.getMediaItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Move a media item to the recycle bin (soft delete)
         * @param {string} id The UUID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recycleMediaItem(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recycleMediaItem(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaItemApi.recycleMediaItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all media items that are in the trash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recycledMediaItems(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaItemDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recycledMediaItems(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaItemApi.recycledMediaItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove a media item from a category.
         * @param {string} id The UUID of the media item.
         * @param {AddOrRemoveSingleCategoryDto} addOrRemoveSingleCategoryDto The body containing the category ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMediaItemFromCategory(id: string, addOrRemoveSingleCategoryDto: AddOrRemoveSingleCategoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMediaItemFromCategory(id, addOrRemoveSingleCategoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaItemApi.removeMediaItemFromCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restore a media item from the recycle bin
         * @param {string} id The UUID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unRecycleMediaItem(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unRecycleMediaItem(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaItemApi.unRecycleMediaItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all media items that are not in any categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uncategorisedMediaItems(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaItemDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uncategorisedMediaItems(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaItemApi.uncategorisedMediaItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload a single media file
         * @param {File} file 
         * @param {string | null} [categoryID] Optional UUID of the category to add this media to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(file: File, categoryID?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(file, categoryID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaItemApi.uploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MediaItemApi - factory interface
 * @export
 */
export const MediaItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaItemApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a media item to a category.
         * @param {string} id The UUID of the media item.
         * @param {AddOrRemoveSingleCategoryDto} addOrRemoveSingleCategoryDto The body containing the category ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMediaItemToCategory(id: string, addOrRemoveSingleCategoryDto: AddOrRemoveSingleCategoryDto, options?: RawAxiosRequestConfig): AxiosPromise<MediaItemDto> {
            return localVarFp.addMediaItemToCategory(id, addOrRemoveSingleCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fully delete a media item.
         * @param {string} id The UUID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a media item by ID
         * @param {string} id The ID of the media item to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaItem(id: string, options?: RawAxiosRequestConfig): AxiosPromise<MediaItemDto> {
            return localVarFp.getMediaItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Move a media item to the recycle bin (soft delete)
         * @param {string} id The UUID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recycleMediaItem(id: string, options?: RawAxiosRequestConfig): AxiosPromise<MediaItemDto> {
            return localVarFp.recycleMediaItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all media items that are in the trash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recycledMediaItems(options?: RawAxiosRequestConfig): AxiosPromise<Array<MediaItemDto>> {
            return localVarFp.recycledMediaItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a media item from a category.
         * @param {string} id The UUID of the media item.
         * @param {AddOrRemoveSingleCategoryDto} addOrRemoveSingleCategoryDto The body containing the category ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMediaItemFromCategory(id: string, addOrRemoveSingleCategoryDto: AddOrRemoveSingleCategoryDto, options?: RawAxiosRequestConfig): AxiosPromise<MediaItemDto> {
            return localVarFp.removeMediaItemFromCategory(id, addOrRemoveSingleCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restore a media item from the recycle bin
         * @param {string} id The UUID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unRecycleMediaItem(id: string, options?: RawAxiosRequestConfig): AxiosPromise<MediaItemDto> {
            return localVarFp.unRecycleMediaItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all media items that are not in any categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uncategorisedMediaItems(options?: RawAxiosRequestConfig): AxiosPromise<Array<MediaItemDto>> {
            return localVarFp.uncategorisedMediaItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a single media file
         * @param {File} file 
         * @param {string | null} [categoryID] Optional UUID of the category to add this media to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(file: File, categoryID?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<MediaItemDto> {
            return localVarFp.uploadFile(file, categoryID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaItemApi - object-oriented interface
 * @export
 * @class MediaItemApi
 * @extends {BaseAPI}
 */
export class MediaItemApi extends BaseAPI {
    /**
     * 
     * @summary Add a media item to a category.
     * @param {string} id The UUID of the media item.
     * @param {AddOrRemoveSingleCategoryDto} addOrRemoveSingleCategoryDto The body containing the category ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaItemApi
     */
    public addMediaItemToCategory(id: string, addOrRemoveSingleCategoryDto: AddOrRemoveSingleCategoryDto, options?: RawAxiosRequestConfig) {
        return MediaItemApiFp(this.configuration).addMediaItemToCategory(id, addOrRemoveSingleCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fully delete a media item.
     * @param {string} id The UUID of the media item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaItemApi
     */
    public deleteItem(id: string, options?: RawAxiosRequestConfig) {
        return MediaItemApiFp(this.configuration).deleteItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a media item by ID
     * @param {string} id The ID of the media item to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaItemApi
     */
    public getMediaItem(id: string, options?: RawAxiosRequestConfig) {
        return MediaItemApiFp(this.configuration).getMediaItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Move a media item to the recycle bin (soft delete)
     * @param {string} id The UUID of the media item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaItemApi
     */
    public recycleMediaItem(id: string, options?: RawAxiosRequestConfig) {
        return MediaItemApiFp(this.configuration).recycleMediaItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all media items that are in the trash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaItemApi
     */
    public recycledMediaItems(options?: RawAxiosRequestConfig) {
        return MediaItemApiFp(this.configuration).recycledMediaItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a media item from a category.
     * @param {string} id The UUID of the media item.
     * @param {AddOrRemoveSingleCategoryDto} addOrRemoveSingleCategoryDto The body containing the category ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaItemApi
     */
    public removeMediaItemFromCategory(id: string, addOrRemoveSingleCategoryDto: AddOrRemoveSingleCategoryDto, options?: RawAxiosRequestConfig) {
        return MediaItemApiFp(this.configuration).removeMediaItemFromCategory(id, addOrRemoveSingleCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restore a media item from the recycle bin
     * @param {string} id The UUID of the media item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaItemApi
     */
    public unRecycleMediaItem(id: string, options?: RawAxiosRequestConfig) {
        return MediaItemApiFp(this.configuration).unRecycleMediaItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all media items that are not in any categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaItemApi
     */
    public uncategorisedMediaItems(options?: RawAxiosRequestConfig) {
        return MediaItemApiFp(this.configuration).uncategorisedMediaItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a single media file
     * @param {File} file 
     * @param {string | null} [categoryID] Optional UUID of the category to add this media to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaItemApi
     */
    public uploadFile(file: File, categoryID?: string | null, options?: RawAxiosRequestConfig) {
        return MediaItemApiFp(this.configuration).uploadFile(file, categoryID, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StaticAssetsApi - axios parameter creator
 * @export
 */
export const StaticAssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The actual serving is handled by middleware, this is for documentation purposes only.
         * @summary Retrieve a static media file. Contains the raw media for the uploaded media items.
         * @param {string} path The path to the file in the following format: \&quot;{id}.{extension}\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaticAsset: async (path: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('getStaticAsset', 'path', path)
            const localVarPath = `/static/{path}`
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The actual serving is handled by middleware, this is for documentation purposes only.
         * @summary Retrieve a static HLS stream for a media item. Only for video files.
         * @param {string} id The ID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaticHLS: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getStaticHLS', 'id', id)
            const localVarPath = `/static/hls/{id}/stream.m3u8`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The actual serving is handled by middleware, this is for documentation purposes only.
         * @summary Retrieve a static thumbnail for a media item. Only for video files.
         * @param {string} id The ID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaticThumbnail: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getStaticThumbnail', 'id', id)
            const localVarPath = `/static/thumbnails/{id}.png`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaticAssetsApi - functional programming interface
 * @export
 */
export const StaticAssetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StaticAssetsApiAxiosParamCreator(configuration)
    return {
        /**
         * The actual serving is handled by middleware, this is for documentation purposes only.
         * @summary Retrieve a static media file. Contains the raw media for the uploaded media items.
         * @param {string} path The path to the file in the following format: \&quot;{id}.{extension}\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStaticAsset(path: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStaticAsset(path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaticAssetsApi.getStaticAsset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The actual serving is handled by middleware, this is for documentation purposes only.
         * @summary Retrieve a static HLS stream for a media item. Only for video files.
         * @param {string} id The ID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStaticHLS(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStaticHLS(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaticAssetsApi.getStaticHLS']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The actual serving is handled by middleware, this is for documentation purposes only.
         * @summary Retrieve a static thumbnail for a media item. Only for video files.
         * @param {string} id The ID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStaticThumbnail(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStaticThumbnail(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaticAssetsApi.getStaticThumbnail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StaticAssetsApi - factory interface
 * @export
 */
export const StaticAssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StaticAssetsApiFp(configuration)
    return {
        /**
         * The actual serving is handled by middleware, this is for documentation purposes only.
         * @summary Retrieve a static media file. Contains the raw media for the uploaded media items.
         * @param {string} path The path to the file in the following format: \&quot;{id}.{extension}\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaticAsset(path: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getStaticAsset(path, options).then((request) => request(axios, basePath));
        },
        /**
         * The actual serving is handled by middleware, this is for documentation purposes only.
         * @summary Retrieve a static HLS stream for a media item. Only for video files.
         * @param {string} id The ID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaticHLS(id: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getStaticHLS(id, options).then((request) => request(axios, basePath));
        },
        /**
         * The actual serving is handled by middleware, this is for documentation purposes only.
         * @summary Retrieve a static thumbnail for a media item. Only for video files.
         * @param {string} id The ID of the media item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaticThumbnail(id: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getStaticThumbnail(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StaticAssetsApi - object-oriented interface
 * @export
 * @class StaticAssetsApi
 * @extends {BaseAPI}
 */
export class StaticAssetsApi extends BaseAPI {
    /**
     * The actual serving is handled by middleware, this is for documentation purposes only.
     * @summary Retrieve a static media file. Contains the raw media for the uploaded media items.
     * @param {string} path The path to the file in the following format: \&quot;{id}.{extension}\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticAssetsApi
     */
    public getStaticAsset(path: string, options?: RawAxiosRequestConfig) {
        return StaticAssetsApiFp(this.configuration).getStaticAsset(path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The actual serving is handled by middleware, this is for documentation purposes only.
     * @summary Retrieve a static HLS stream for a media item. Only for video files.
     * @param {string} id The ID of the media item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticAssetsApi
     */
    public getStaticHLS(id: string, options?: RawAxiosRequestConfig) {
        return StaticAssetsApiFp(this.configuration).getStaticHLS(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The actual serving is handled by middleware, this is for documentation purposes only.
     * @summary Retrieve a static thumbnail for a media item. Only for video files.
     * @param {string} id The ID of the media item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticAssetsApi
     */
    public getStaticThumbnail(id: string, options?: RawAxiosRequestConfig) {
        return StaticAssetsApiFp(this.configuration).getStaticThumbnail(id, options).then((request) => request(this.axios, this.basePath));
    }
}



